name: Nmap Static Build

on:
  push:
    branches:
      - main  # 或者指定其他分支
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64, armv7]
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential libssl-dev libssh-dev libssh2-1-dev automake

      - name: Check latest Nmap version
        id: check-version
        run: |
          LATEST_VERSION=$(curl -s https://nmap.org/dist/ | grep -o 'nmap-[0-9.]\+\.tar\.bz2' | sort -V | tail -n 1 | sed 's/nmap-\(.*\)\.tar\.bz2/\1/')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          
          if gh release view "v$LATEST_VERSION" &> /dev/null; then
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          else
            echo "SKIP_BUILD=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install cross-compilation tools
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      - name: Download and build Nmap
        if: env.SKIP_BUILD == 'false'
        run: |
          wget https://nmap.org/dist/nmap-$LATEST_VERSION.tar.bz2
          tar -xjf nmap-$LATEST_VERSION.tar.bz2
          cd nmap-$LATEST_VERSION
          
          case "${{ matrix.arch }}" in
            arm64)
              export CC=aarch64-linux-gnu-gcc
              HOST=aarch64-linux-gnu
              ;;
            armv7)
              export CC=arm-linux-gnueabihf-gcc
              HOST=arm-linux-gnueabihf
              ;;
            *)
              export CC=gcc
              HOST=x86_64-linux-gnu
              ;;
          esac

          ./configure --host=$HOST --without-nmap-update --enable-static --without-zenmap
          make static
          
          mkdir -p ../release
          cp nmap ../release/
          cp ncat/ncat ../release/ || echo "ncat not built"
          cp nping/nping ../release/ || echo "nping not built"
          cp ndiff/ndiff.py ../release/ || echo "ndiff not built"
          
          cd ../release
          tar -czvf nmap-static-$LATEST_VERSION-linux-${{ matrix.arch }}.tar.gz *

      - name: Create Release
        if: env.SKIP_BUILD == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.LATEST_VERSION }}
          name: Nmap Static Build v${{ env.LATEST_VERSION }}
          body: |
            Static build of Nmap v${{ env.LATEST_VERSION }} for Linux ${{ matrix.arch }}
            
            Built with: libssl, libssh, libssh2
            Compiled with: `./configure --without-nmap-update --enable-static --without-zenmap; make static`
          files: release/nmap-static-${{ env.LATEST_VERSION }}-linux-${{ matrix.arch }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
